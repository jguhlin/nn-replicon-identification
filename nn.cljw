;; gorilla-repl.fileformat = 1

;; **
;;; # Gorilla REPL
;;; 
;;; Welcome to gorilla :-)
;;; 
;;; Shift + enter evaluates code. Hit alt+g twice in quick succession or click the menu icon (upper-right corner) for more commands ...
;;; 
;;; It's a good habit to run each worksheet in its own namespace: feel free to use the declaration we've provided below if you'd like.
;; **

;; @@
(ns harmonious-drylands
  (:require [gorilla-plot.core :as plot]
            [clojure.core.matrix :as mat]
            [clojure.core.reducers :as r]
            [clj-fuzzy.metrics :as fm]
            [cortex.experiment.train :as train]
            [cortex.nn.layers :as layers]
            [cortex.nn.network :as network]
            [cortex.nn.execute :as execute]
            [cortex.optimize.adadelta :as adadelta]
            [cortex.optimize.adam :as adam]
            [cortex.metrics :as metrics]
            [cortex.util :as util]
			[cortex.optimize.adam :as adam]
            [cortex.experiment.train :as experiment-train]
			[cortex.nn.execute :as execute]
            [clojure.math.numeric-tower :as math]))
  ;(:import org.tensorflow.TensorFlow)

(mat/set-current-implementation :vectorz)
;(use 'clojure.core.matrix.operators)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-keyword'>:vectorz</span>","value":":vectorz"}
;; <=

;; @@
(def k 7)
(def space (math/expt 5 k))

; Use base 5, 0 is \N, etc...
;(Integer/toString 1953124 5)
; Build sparse-array 

(defn get-kmers [k]
  (fn [sequence]
    (distinct
      (partition k 1 sequence))))

(defn convert-char-to-number [c]
  (case c 
    \N 0 \A 1 \C 2 \T 3 \G 4 0))

(defn convert-kmer [kmer]
  (new BigInteger (apply str (map convert-char-to-number kmer)) 5))

(def seq1 "ACTGGGCTAATACCAATTAACAGATTGAGATTTAATGATGACAATAGA")
(def seq2 "TTTAAAAAGTAATACCAATTAACAGATTGAGATTTAATGATGACAATAGAACTGACAATACA")

(defn convert-sequence [sequence]
  (let [data (frequencies
               (map 
                 convert-kmer
                 ((get-kmers k) sequence)))]
    (mat/sparse-matrix
      (for [i (range 0 space)]
        (get data i 0)))))


; Convert into a sequence of 1000bp
; This is for running the net, not training
(defn convert-sequences [seq-to-analyze]
  (let [small-seq (interleave
                    (range)
                    (map 
                      convert-sequence
                      (partition 100 seq-to-analyze)))]
    small-seq))

(defn training-set [seqs-to-analyze label]
  (let [seqs (partition 
               100 
               (Math/floor (* k 3.2)) 
               seqs-to-analyze) ; More aggressive partition here for better training....
        training-data (r/foldcat
                        (r/map
                          (fn [x] {:data (convert-sequence x) :label label})
                          seqs))]
    training-data))

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;harmonious-drylands/training-set</span>","value":"#'harmonious-drylands/training-set"}
;; <=

;; @@
; (first (training-set seq-psyma :psyma))
;; @@

;; **
;;; ## Cortex NN Stuff
;;; See: https://github.com/thinktopic/cortex/blob/master/examples/catsdogs-classification/INTRO.md
;;; 
;; **

;; @@
(def params
  {:test-ds-size      50000 ;; total = 284807, test-ds ~= 17.5%
   :optimizer         (adam/adam)   ;; alternately, (adadelta/adadelta)
   :batch-size        100
   :epoch-count       50
   :epoch-size        200000})

(def network-description
  [(layers/input 1000 1 1 :id :data)
   (layers/convolutional 1000 0 1 20)
   (layers/max-pooling 2 0 2)
   (layers/dropout 0.9)
   (layers/relu)
   (layers/convolutional 5 0 1 50)
   (layers/max-pooling 2 0 2)
   (layers/batch-normalization)
   (layers/linear 1000)
   (layers/relu :center-loss {:label-indexes {:stream :labels}
                              :label-inverse-counts {:stream :labels}
                              :labels {:stream :labels}
                              :alpha 0.9
                              :lambda 1e-4})
   (layers/dropout 0.5)
   (layers/linear 5)
   (layers/softmax :id :label)])
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;harmonious-drylands/network-description</span>","value":"#'harmonious-drylands/network-description"}
;; <=

;; @@
space
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-long'>78125</span>","value":"78125"}
;; <=

;; @@
; This is the more complicated "Example"
(def train-orig
  (concat
    (training-set seq-main :main)
    (training-set seq-psyma :psyma)
    (training-set seq-psymb :psymb)))

(count train-orig)
(first train-orig)
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:data</span>","value":":data"},{"type":"html","content":"<span class='clj-unkown'>#vectorz/vector Large vector with shape: [78125]</span>","value":"#vectorz/vector Large vector with shape: [78125]"}],"value":"[:data #vectorz/vector Large vector with shape: [78125]]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:label</span>","value":":label"},{"type":"html","content":"<span class='clj-keyword'>:main</span>","value":":main"}],"value":"[:label :main]"}],"value":"{:data #vectorz/vector Large vector with shape: [78125], :label :main}"}
;; <=

;; @@
(def trained
  (experiment-train/train-n 
    network-description
    training-set
    training-set
    :batch-size 10 :epoch-count 2000))
;; @@
;; ->
;;; CUDA backend creation failed, reverting to CPU
;;; 
;; <-

;; @@

;; @@

;; @@
(defn train
  "Trains network for :epoch-count number of epochs"
  []
  (let [network (network/linear-network network-description)
        train-ds (experiment-util/infinite-class-balanced-dataset train-orig
                                            :class-key :label
                                            :epoch-size (:epoch-size params))]
        (experiment-train/train-n network train-ds test-ds
                                  :batch-size (:batch-size params)
                                  :epoch-count (:epoch-count params)
                                  :optimizer (:optimizer params)
                                  :test-fn f1-test-fn)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; ## Test Seqs
;; **

;; @@
(def seq-main
  (clojure.string/upper-case    "CTCTGGAAAGGAGATTCGGCAGTGCGAAGGCGAGGCCCGCAAGGACGACCAGCCAGATGAGAATATTCTTGAACGGCGACAACCTGGGCATATTTCGAAATGCTCCATCCGCCGGTCTCTGCCGGTCGCGGCCCTTGCCCTAACCACGGTGATTTTGGCCTCGCGTCGCTCCAAAATCAAACCGTGATCAATGCCGATCGAAGGCGCGGTATGCGGGCGAAAACCGCGCACGCTTCTTCAAGTACCCGCGCCGGGGTTACTCCTTGACGGGCTCGCCCTTCACACGAACCTCGGAGACGCCGCTGCGCACGACGCGGACCTTGATGCCCTCGGCGATCTCCACTTCGAGCTCCGTATCGTCGACGACCTTGGTCACCTTGCCGACAATGCCGCCGCCGGTGACGACCTGGTCGCCGCGCCGGATGTTCTTCAGGAGCTCTTCGCGGCGCTTCATCTGCGCACGCTGCGGCCGGATGATCAGGAAATACATCACCACGAAGATCAGCAGGAATGGCAGGATGGACATCAGAATGTCGGCGCCGCCGCCCCAGGGGCCGCCGTCTGCGCGAAAGCTTCGGTAATAAACATCGATCACTCCTTGAGTTCAAATTGCGCGCTTGCCCCCGCGGCAAACCTGCCGGAATATAGGCAAGCCGTCCCGTAACACAAATCGTCGGTACACTTCCCCGTTTCTCCTGCCTCTGGCACAAATTCCGCAGCAGGAGAACCCCCTGGTTGCAGGCTGCCGGTCTTTTCCAGCGCAAACCGCCGTGCTACCGAGAAAAACGCCGCCGGCGGCAGCTTCAACGGATTCGACCGGAGGATGAACGTCGCGGCGATTCAAGGATTTGGGTGGGCTGACGCACGCCCGTTATCGCGCGGGTCGGCCGCCCAGTTCGAAATTCAGCCTGCCGGAGATACATGAAATGCCCGAAAGCAAGATCGACGTCCTGCTCAACGAAATACAGAAGCTTTCGGCCGCGATGGAGCGCATCGCCGGACCGGCATATGCCGTCAACAATTGGCATGAGGCGGAGTGTTTCGTCTGGGCACCGGCCACGCGCCACCTGCAGCCCGTCCCGAGGCCGAATCGCATCGACCTCGCGCTCATCGCCGGCGTCGACCATGTCCGCGACATTCTCTTCGACAACACGCTCCGCTTCGCCGAAGGCTATCCGGCGAACAACGTGCTCCTGTGGGGCGCCCGCGGCATGGGCAAATCGTCACTGGTCAAGGCGGTCCACGCAAAGGTCGCCCACGACACCGGCAGCGCAATCAAGCTTGTCGAAGTACACCGGGAGGATATCGCCACCCTGCCCGTGCTGATGGAAATCCTGAAGGCGGCGCCGATGCCCGTGATCGTCTTCTGCGATGATCTCTCCTTCGATCACGACGATACCTCCTACAAGTCGCTGAAGGCGGTTCTCGACGGCGGCGTCGAGGGGCGCCCGGCAAACGTTCTGCTCTATGCGACGTCCAACCGCAGACACCTGCTTCCCCGCAACATGATGGAAAATGAACAATCCACCGCCATTAACCCCTCGGAGGCCGTCGAGGAAAAAGTGTCGCTATCCGACCGCTTCGGGCTATGGCTGGGTTTCTACAAGTGCAGCCAGGACGACTATCTGGCGATGGTCGACGGGTATGCGCAGTACTTCAAATTGCCTCTCGAGCCCGAAGCGCTGCATGCCGAGGCTCTTGAATGGGCGACGACGCGAGGATCGAGGTCCGGCCGCGTCG"))

(def seq-psyma
  (clojure.string/upper-case  "GAACACCGGTACGGCGCCGAGCGCATCGACCTTCGACAGCCTGCTCGACAAGGGACAGGCCTCAGCCACCGATATTTGGTCACGTGCCTCCTGGCCGGTCGACATCGTCACCGGCGTCGGCGGCATGATGGTGATCGGCGCGAGCTTCATCGTCGCCGCGATCGGCTATATCGTCTCGCTTTACGCGCGGCTGGCGCTTGCCATCGTGCTCGCGATTGGACCAATTTTCGTGGCGCTCGCCATGTTTCAGGCGACGCGGCGCTTCACGGAGGCATGGATCGGCCAGCTTGCGAACTTTGTGATCCTCCAGGTCCTCGTCGTCGCCGTCGGCTCTCTACTGATCACCTGCATCGACACCACCTTCGCGGCGATCGACGGATATAGCGATGTGCTGATGCGGCCGATCGCACTCTGCGCCATCTGCCTCGCGGCTCTCTATGTCTTCTATCAACTCCCGAACATCGCCTCGGCGCTTGCCGCCGGCGGCGCGTCGTTGACCTACGGCTACGGCGCCGCACGCGACGCCCACGAAAGCACGCTCGCCTGGGCGGCTTCCCATACCGTCCGTGCGGCCGGACGTGGTGTCCGTGCCGTTGGCCGAACCTTCACCTCAAAAGGCTCCGGATCATGACGCTTTTCGCACGAACAAGAGAAAGGCTTTCCAGGATTAATCAGAACGTTCCGCTGCTTTGCGTTGCGGCGATCTTAAGCGGTTGCGCATCGATGACCTATCCGCTCCCGAAATGTGACGGCTATTCGCGCCGGCCCCTCAATCGATCGATGTGGCAGTGGGAAGACAATAGCAACTTCAAGCTGAAACAGTCCGATGCGCGACCGGCGGCCTCTCAGTCCGTCGCCACCGCTTATGCCGGCGAGGGCAGGGAATTTCCCGCCTTCGCACATCTCGACATCGACGCATCCTATCGTCCTTGCGAGGGTTGACTCGATGGTCTCGGCGGACGAACTCAAGACATACTTCGAAAAGGCGCGACGCTTCGATCAGGACCGCGTGATCCAGGT"))

(def seq-psymb 
  (clojure.string/upper-case  "cgcCGCGGCTGCGGTTCAGCGCCAGCTCCAGATTGTCCCAGACCGTATGGTTCTCGAAGACGGTCGGCTTCTGGAACTTGCGGCCGATGCCGAGCTCGGCGATTGCCGCTTCGTCTTTCTTGGTGAGGTCGATGTCGCCCTTGAAGAAGACCTCGCCCTCGTCCGGCCGCGTCTTGCCGGTGATGATGTCCATCATCGTCGTCTTGCCGGCGCCATTGGGGCCGATGATCGCGCGCAGTTCCCCCGGCTCTACGACGAAGGAGAGCGAGTTTAGCGCCTTGAAGCCATCGAAGGAGACGGAGACCCCATCGAGATAGAGCAGGTTCCTGGGTTTCTTTCCGGTCATGGCGATCACTCCGCGGCCACCGTTTCGGCGTCCGCAAGGCTCGCCGCTTTTTCGCTCTCGCTTTCCTTCCGGGCCGCCGCGTGGGATGTGCGCCGGCTTGCGAGATAGCTCTGCGCCGTGCCGACCACGCCCTTCGGCAGGAAAAGCGTGACGAGGACGAAGAGCCCGCCGAGCGCAAAGAGCCAGAATTCGGGGAAGGCGGCGGTGAATATGCTTTTTCCGCCGTTGACGAGGATCGCGCCGACGATCGGTCCGATCAGCGTGCCGCGCCCGCCGACAGCCGTCCATATGACCACCTCGATCGAATTGGCGGGGGCGAACTCGCCCGGATTGATGATGCCGACTTGCGGCACGTAGAGCGCGCCGGCGACGCCCGCCATCATTGCCGAGACCGTGAAGGCGAAGAGCTTCATGTGCTCGACGCGATAGCCGAGAAAGCGTGTGCGGCTTTCCGCGTCGCGCAGCGCCACCAGCACCTTGCCGAATTTCGAGCGGACGATGCCCGAGGTGACGACGAGCGAAACGGCAAGCGCCAGCGCGGAGGCTGCAAAGAGTGCCGCACGCGTTCCGTCGGCCTGGATGTTGAAGCCGAGGATGTCCTTGAAATCGGTGAGCCCGTTATTGCCGCCGAAGCCCATGTCGTTGCGGAAGAAGGCGAGCAGCAGCGCATAGGTCATCGCCTGGGTGATGATCGAGAGATAGACCCCGTTGACCCGCGAGCGGAAGGCGAACCAGCCGAAGACGAAGGCAAGCAGGCCCGGCACCAGCACCACCATCAGCGCTGCGAACCAGAACATGTCGAAGCCGTACCAGAACCAGGGCAGCTCCTTCCAGTTGAGAAAGACCATGAAGTCCGGCAGCAGCGGATTGCCGTAGGAGCCGCGTGCGCCGATCTGGCGCATCAGATACATGCCCATGGCATAGCCGCCGAGCGCGAAGAAGGCCGCATGCCCCAGCGAGAGGATGCCGCAGAA"))


;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;harmonious-drylands/seq-psymb</span>","value":"#'harmonious-drylands/seq-psymb"}
;; <=

;; @@
; (tf-session (tf-graph))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>#object[org.tensorflow.Session 0x11cf641d &quot;org.tensorflow.Session@11cf641d&quot;]</span>","value":"#object[org.tensorflow.Session 0x11cf641d \"org.tensorflow.Session@11cf641d\"]"}
;; <=

;; **
;;; ## TF Fn's
;;; Not using tensorflow anymore...
;; **

;; @@
(defn tf-graph []
  (new org.tensorflow.Graph))

(defn tf-session [graph]
  (new org.tensorflow.Session graph))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;harmonious-drylands/tf-session</span>","value":"#'harmonious-drylands/tf-session"}
;; <=

;; @@
; Running this crashes things
(ns learn-cortex.core
  (:require [cortex.experiment.train :as train]
            [cortex.nn.execute :as execute]
            [cortex.nn.layers :as layers]
            [cortex.nn.network :as network]))

(def xor
  [{:x [0.0 0.0] :y [0.0]}
   {:x [0.0 1.0] :y [1.0]}
   {:x [1.0 0.0] :y [1.0]}
   {:x [1.0 1.0] :y [0.0]}])

(def nn (-> [(layers/input 2 1 1 :id :x) ;; input :x 2*1 dimensions
             (layers/linear->tanh 10)
             (layers/linear 1 :id :y)]
            network/linear-network))

(def trained
  ;; Train with xor, test with xor
  (train/train-n nn xor xor :batch-size 4 :epoch-count 3000))

;; Before
(execute/run nn xor)

;; After
(execute/run trained xor)
;; @@
